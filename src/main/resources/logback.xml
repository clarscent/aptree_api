<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %magenta(%-4relative) -&#45;&#45; [ %thread{10} ] %cyan(%logger{20}[%method:%line]) : %msg%n</pattern>-->
			<pattern>%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) %cyan(%logger{20}[%method:%line]) : %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>/var/log/sylogis/server.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>/var/log/sylogis/server.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>180</maxHistory>
		</rollingPolicy>

		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} %highlight(%-5level) %cyan(%logger{20}[%method:%line]) : %msg%n</pattern>
		</encoder>
	</appender>

	<logger name="org.springframework" level="info"/>

	<logger name="jdbc.sqlonly" level="off"/> <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqltiming" level="INFO"/> <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.audit" level="ERROR"/> <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.resultset" level="off"/> <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="com.dexa.fabric" level="DEBUG"/>
	<logger name="com.atomikos" level="INFO"/>
	<logger name="com.atomikos.icatch.provider.imp.AssemblerImp" level="off"/>

--	<root level="INFO">
		<appender-ref ref="CONSOLE"/>
	</root>

	<root level="INFO">
		<appender-ref ref="FILE"/>
	</root>
</configuration>